#+TITLE: Elisp Code
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty

NOTE: Comment your code, and verify it works for "breaking cases" i.e. 0! = 1.

* Factorial Code
** Code
   :LOGBOOK:
   CLOCK: [2018-05-09 Wed 11:28]
   :END:
#+BEGIN_SRC emacs-lisp
(+ 2 3 4)

    (defun factorial (x)
     ; set an iterator equal to the given number    
         (progn (setq i x)  
     ; create a while loop that stops when iterator is equal to 1. Notice the while loop is never executed when x is 0.
         (while (> i 1)      
       ; decrease the iterator by 1
            (setq i (- i 1))  
         ; multiply the answer to the decrementing number
            (setq x (* i x)))
        ;exit the while loop and return the value of x. Returns 0 when x is 0. 
            (setq x x)))

   (factorial 5)
   (factorial 0)
   (factorial 3)
   (factorial 4) 
       

#+END_SRC
** Test cases
** How big a number will make your computer freeze?
* "Real-World" function with mapcar
** What is mapcar
** Code
#+BEGIN_SRC emacs-lisp

; here are some ideas, we can change this if we want to. 
  ; you can make a sequence with a definition of n!. 
  (mapcar 'factorial [1 2 3 4 5 6 7])
; In a map of authors and the books they wrote, you can call car on all of the elements to see all of the authors in your map.
   (mapcar 'car '(("Jules Verne" "20,000 leagues under the sea" "Around the world in 80 days") ("H G Wells" "Wheels of Chance" "War of the Worlds" "The Time Machine")))
  ; In the same way, you can get all of the members from a list of employees.
   (mapcar 'car '(("John" "20" "male" "100,000") ("Joe" "30" "male" "80,000") ("Mary" "25" "female" "95,000")))
#+END_SRC
* Loop function
** Code
#+BEGIN_SRC emacs-lisp

   ; radius of outermost circle program
  (defun radius (r n)
    (progn
     (while (< n 1000) 
       (setq cosi (cos (/ 3.14159265359 n)))
         (setq rad (/ r cosi))
         (setq r rad)
          (setq n (+ n 1)))
        (setq r r)))

    (radius 1 3)

#+END_SRC
